/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package ir.darkdeveloper.Chap1Basic;

import java.util.Comparator;
import java.util.List;

public class Assignment1 {

        public static void main(String[] args) {
                var raoul = new Trader("Raoul", "Cambridge");
                var mario = new Trader("Mario", "Milan");
                var alan = new Trader("Alan", "Cambridge");
                var brian = new Trader("Brian", "Cambridge");
                var transactions = List.of(
                                new Transaction(brian, 2011, 300),
                                new Transaction(raoul, 2012, 1000),
                                new Transaction(raoul, 2011, 400),
                                new Transaction(mario, 2012, 710),
                                new Transaction(mario, 2012, 700),
                                new Transaction(alan, 2012, 950));

                // 1
                transactions.stream()
                                .filter(t -> t.year() == 2011)
                                .sorted(Comparator.comparingInt(Transaction::value))
                                .forEach(System.out::println);

                // 2
                transactions.stream()
                                .map(t -> t.trader().city())
                                .distinct()
                                .forEach(System.out::println);

                // 3 
                transactions.stream()
                                .map(Transaction::trader)
                                .filter(trader -> trader.city().equals("Cambridge"))
                                .distinct()
                                .sorted(Comparator.comparing(Trader::name))
                                .forEach(System.out::println);

                // 4
                var opt1 = transactions.stream()
                                .map(t -> t.trader().name())
                                .distinct()
                                .sorted(Comparator.comparing(String::valueOf))
                                // .collect(joining())
                                .reduce((pre, name) -> pre + " " + name);
                System.out.println(opt1);

                // 5
                System.out.println(transactions.stream()
                                .anyMatch(t -> t.trader().city().equals("Milan")));

                // 6 
                transactions.stream()
                                .filter(t -> t.trader().city().equals("Cambridge"))
                                .map(Transaction::value)
                                .forEach(System.out::println);

                // 7
                var opt2 = transactions.stream()
                                .map(Transaction::value)
                                .reduce(Integer::max);
                System.out.println(opt2);

                // 8
                var opt3 = transactions.stream()
                                .reduce((t1, t2) -> t1.value() < t2.value() ? t1 : t2);
                System.out.println(opt3);

        }

}

record Trader(
                String name,
                String city) {
}

record Transaction(
                Trader trader,
                int year,
                int value) {
}
